[
  {
    "Sno": 1.0,
    "Primary Language of Benchmark": "cpp",
    "Vulnerability": 1.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Improper memory management in C++ can lead to buffer overflow vulnerabilities.",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "cpp\n#include <cstring>\n\nvoid copyString(char* dest, const char* src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n}\n\nint main() {\n    char source[10] = \"Hello!\";\n    char destination[5];\n    copyString(destination, source);\n    return 0;\n}\n",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 1,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "#include <cstring>\n\nvoid copyString(char* dest, const char* src) {\n    while (*src != '\\0') {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n}\n\nint main() {\n    char source[10] = \"Hello!\";\n    char destination[5];\n    copyString(destination, source);\n    return 0;\n}"
    }
  },
  {
    "Sno": 2.0,
    "Primary Language of Benchmark": "cpp",
    "Vulnerability": 1.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Memory leak vulnerability in C++",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "cpp\n#include <iostream>\n\nclass DataProcessor {\npublic:\n    int* data;\n    DataProcessor(int size) {\n        data = new int[size];\n    }\n    ~DataProcessor() {\n        // Missing delete[] data;\n    }\n};\n\nint main() {\n    DataProcessor* processor = new DataProcessor(1000);\n    // Missing delete processor;\n    return 0;\n}\n",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 1,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "#include <iostream>\n\nclass DataProcessor {\npublic:\n    int* data;\n    DataProcessor(int size) {\n        data = new int[size];\n    }\n    ~DataProcessor() {\n        // Missing delete[] data;\n    }\n};\n\nint main() {\n    DataProcessor* processor = new DataProcessor(1000);\n    // Missing delete processor;\n    return 0;\n}"
    }
  },
  {
    "Sno": 3.0,
    "Primary Language of Benchmark": "cpp",
    "Vulnerability": 0.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Safe C++ code with proper memory management",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "cpp\n#include <string>\n#include <memory>\n\nclass SafeProcessor {\nprivate:\n    std::unique_ptr<int[]> data;\n    size_t size;\npublic:\n    SafeProcessor(size_t s) : size(s) {\n        data = std::make_unique<int[]>(s);\n    }\n    void processData() {\n        for(size_t i = 0; i < size; ++i) {\n            data[i] = i * 2;\n        }\n    }\n};\n\nint main() {\n    SafeProcessor processor(1000);\n    processor.processData();\n    return 0;\n}\n",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 0,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "#include <string>\n#include <memory>\n\nclass SafeProcessor {\nprivate:\n    std::unique_ptr<int[]> data;\n    size_t size;\npublic:\n    SafeProcessor(size_t s) : size(s) {\n        data = std::make_unique<int[]>(s);\n    }\n    void processData() {\n        for(size_t i = 0; i < size; ++i) {\n            data[i] = i * 2;\n        }\n    }\n};\n\nint main() {\n    SafeProcessor processor(1000);\n    processor.processData();\n    return 0;\n}"
    }
  }
]