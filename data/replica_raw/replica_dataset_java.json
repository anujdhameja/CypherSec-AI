[
  {
    "Sno": 1.0,
    "Primary Language of Benchmark": "java",
    "Vulnerability": 1.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "SQL injection vulnerability in Java",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "java\nimport java.sql.*;\n\npublic class UserLogin {\n    private Connection conn;\n    \n    public boolean authenticateUser(String username, String password) {\n        try {\n            Statement stmt = conn.createStatement();\n            // Vulnerable: SQL injection via string concatenation\n            String query = \"SELECT * FROM users WHERE username='\" + username + \n                          \"' AND password='\" + password + \"'\";\n            ResultSet rs = stmt.executeQuery(query);\n            return rs.next();\n        } catch (SQLException e) {\n            return false;\n        }\n    }\n    \n    public void deleteUser(String userId) {\n        try {\n            Statement stmt = conn.createStatement();\n            // Vulnerable: SQL injection\n            stmt.executeUpdate(\"DELETE FROM users WHERE id=\" + userId);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 1,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "import java.sql.*;\n\npublic class UserLogin {\n    private Connection conn;\n    \n    public boolean authenticateUser(String username, String password) {\n        try {\n            Statement stmt = conn.createStatement();\n            // Vulnerable: SQL injection via string concatenation\n            String query = \"SELECT * FROM users WHERE username='\" + username + \n                          \"' AND password='\" + password + \"'\";\n            ResultSet rs = stmt.executeQuery(query);\n            return rs.next();\n        } catch (SQLException e) {\n            return false;\n        }\n    }\n    \n    public void deleteUser(String userId) {\n        try {\n            Statement stmt = conn.createStatement();\n            // Vulnerable: SQL injection\n            stmt.executeUpdate(\"DELETE FROM users WHERE id=\" + userId);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    }
  },
  {
    "Sno": 2.0,
    "Primary Language of Benchmark": "java",
    "Vulnerability": 1.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Command injection and deserialization vulnerabilities in Java",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "java\nimport java.io.*;\n\npublic class SystemUtils {\n    \n    public void executeCommand(String command) {\n        try {\n            // Vulnerable: Command injection\n            Runtime.getRuntime().exec(command);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    public Object loadObject(byte[] data) {\n        try {\n            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));\n            // Vulnerable: Deserialization of untrusted data\n            return ois.readObject();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n    \n    public Class<?> loadClass(String className) {\n        try {\n            // Vulnerable: Reflection with user input\n            return Class.forName(className);\n        } catch (ClassNotFoundException e) {\n            return null;\n        }\n    }\n}\n",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 1,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "import java.io.*;\n\npublic class SystemUtils {\n    \n    public void executeCommand(String command) {\n        try {\n            // Vulnerable: Command injection\n            Runtime.getRuntime().exec(command);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    public Object loadObject(byte[] data) {\n        try {\n            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));\n            // Vulnerable: Deserialization of untrusted data\n            return ois.readObject();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n    \n    public Class<?> loadClass(String className) {\n        try {\n            // Vulnerable: Reflection with user input\n            return Class.forName(className);\n        } catch (ClassNotFoundException e) {\n            return null;\n        }\n    }\n}"
    }
  },
  {
    "Sno": 3.0,
    "Primary Language of Benchmark": "java",
    "Vulnerability": 0.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Safe Java code with prepared statements",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "java\nimport java.sql.*;\n\npublic class SafeUserLogin {\n    private Connection conn;\n    \n    public boolean authenticateUser(String username, String password) {\n        try {\n            // Safe: Using prepared statements\n            String query = \"SELECT * FROM users WHERE username=? AND password=?\";\n            PreparedStatement pstmt = conn.prepareStatement(query);\n            pstmt.setString(1, username);\n            pstmt.setString(2, password);\n            ResultSet rs = pstmt.executeQuery();\n            return rs.next();\n        } catch (SQLException e) {\n            return false;\n        }\n    }\n    \n    public void deleteUser(int userId) {\n        try {\n            // Safe: Using prepared statement with proper type\n            String query = \"DELETE FROM users WHERE id=?\";\n            PreparedStatement pstmt = conn.prepareStatement(query);\n            pstmt.setInt(1, userId);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 0,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "import java.sql.*;\n\npublic class SafeUserLogin {\n    private Connection conn;\n    \n    public boolean authenticateUser(String username, String password) {\n        try {\n            // Safe: Using prepared statements\n            String query = \"SELECT * FROM users WHERE username=? AND password=?\";\n            PreparedStatement pstmt = conn.prepareStatement(query);\n            pstmt.setString(1, username);\n            pstmt.setString(2, password);\n            ResultSet rs = pstmt.executeQuery();\n            return rs.next();\n        } catch (SQLException e) {\n            return false;\n        }\n    }\n    \n    public void deleteUser(int userId) {\n        try {\n            // Safe: Using prepared statement with proper type\n            String query = \"DELETE FROM users WHERE id=?\";\n            PreparedStatement pstmt = conn.prepareStatement(query);\n            pstmt.setInt(1, userId);\n            pstmt.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"
    }
  }
]