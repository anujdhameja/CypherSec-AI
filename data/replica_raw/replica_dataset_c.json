[
  {
    "Sno": 1.0,
    "Primary Language of Benchmark": "c",
    "Vulnerability": 1.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Buffer overflow vulnerability in C",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "#include <string.h>\n#include <stdio.h>\n\nvoid vulnerable_function(char* input) {\n    char buffer[10];\n    strcpy(buffer, input);  // Vulnerable line - no bounds checking\n    printf(\"Buffer: %s\\n\", buffer);\n}\n\nint main() {\n    char large_input[100] = \"This is a very long string that will overflow the buffer\";\n    vulnerable_function(large_input);\n    return 0;\n}",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 1,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "#include <string.h>\n#include <stdio.h>\n\nvoid vulnerable_function(char* input) {\n    char buffer[10];\n    strcpy(buffer, input);  // Vulnerable line - no bounds checking\n    printf(\"Buffer: %s\\n\", buffer);\n}\n\nint main() {\n    char large_input[100] = \"This is a very long string that will overflow the buffer\";\n    vulnerable_function(large_input);\n    return 0;\n}"
    }
  },
  {
    "Sno": 2.0,
    "Primary Language of Benchmark": "c",
    "Vulnerability": 0.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Safe string handling in C",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "#include <string.h>\n#include <stdio.h>\n\nvoid safe_function(char* input) {\n    char buffer[100];\n    strncpy(buffer, input, sizeof(buffer) - 1);  // Safe - bounds checking\n    buffer[sizeof(buffer) - 1] = '\\0';\n    printf(\"Buffer: %s\\n\", buffer);\n}\n\nint main() {\n    char input[50] = \"This is a safe string\";\n    safe_function(input);\n    return 0;\n}",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 0,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "#include <string.h>\n#include <stdio.h>\n\nvoid safe_function(char* input) {\n    char buffer[100];\n    strncpy(buffer, input, sizeof(buffer) - 1);  // Safe - bounds checking\n    buffer[sizeof(buffer) - 1] = '\\0';\n    printf(\"Buffer: %s\\n\", buffer);\n}\n\nint main() {\n    char input[50] = \"This is a safe string\";\n    safe_function(input);\n    return 0;\n}"
    }
  },
  {
    "Sno": 3.0,
    "Primary Language of Benchmark": "c",
    "Vulnerability": 1.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Use after free vulnerability",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "#include <stdlib.h>\n#include <stdio.h>\n\nint main() {\n    char* ptr = malloc(100);\n    free(ptr);\n    printf(\"%s\\n\", ptr);  // Vulnerable - use after free\n    return 0;\n}",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 1,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "#include <stdlib.h>\n#include <stdio.h>\n\nint main() {\n    char* ptr = malloc(100);\n    free(ptr);\n    printf(\"%s\\n\", ptr);  // Vulnerable - use after free\n    return 0;\n}"
    }
  },
  {
    "Sno": 4.0,
    "Primary Language of Benchmark": "c",
    "Vulnerability": 0.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Safe memory management",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "#include <stdlib.h>\n#include <stdio.h>\n\nint main() {\n    char* ptr = malloc(100);\n    if (ptr != NULL) {\n        printf(\"Memory allocated\\n\");\n        free(ptr);\n        ptr = NULL;  // Safe - nullify after free\n    }\n    return 0;\n}",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 0,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "#include <stdlib.h>\n#include <stdio.h>\n\nint main() {\n    char* ptr = malloc(100);\n    if (ptr != NULL) {\n        printf(\"Memory allocated\\n\");\n        free(ptr);\n        ptr = NULL;  // Safe - nullify after free\n    }\n    return 0;\n}"
    }
  }
]