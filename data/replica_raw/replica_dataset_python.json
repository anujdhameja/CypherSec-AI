[
  {
    "Sno": 1.0,
    "Primary Language of Benchmark": "python",
    "Vulnerability": 1.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Command injection vulnerability in Python",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "python\nimport os\nimport subprocess\n\ndef execute_command(user_input):\n    # Vulnerable: Direct execution of user input\n    os.system(user_input)\n    \ndef run_process(command):\n    # Vulnerable: shell=True with user input\n    subprocess.call(command, shell=True)\n\ndef main():\n    user_cmd = input(\"Enter command: \")\n    execute_command(user_cmd)\n    run_process(user_cmd)\n\nif __name__ == \"__main__\":\n    main()\n",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 1,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "import os\nimport subprocess\n\ndef execute_command(user_input):\n    # Vulnerable: Direct execution of user input\n    os.system(user_input)\n    \ndef run_process(command):\n    # Vulnerable: shell=True with user input\n    subprocess.call(command, shell=True)\n\ndef main():\n    user_cmd = input(\"Enter command: \")\n    execute_command(user_cmd)\n    run_process(user_cmd)\n\nif __name__ == \"__main__\":\n    main()"
    }
  },
  {
    "Sno": 2.0,
    "Primary Language of Benchmark": "python",
    "Vulnerability": 1.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Code injection via eval/exec in Python",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "python\ndef calculate_expression(expr):\n    # Vulnerable: eval with user input\n    result = eval(expr)\n    return result\n\ndef execute_code(code):\n    # Vulnerable: exec with user input\n    exec(code)\n\ndef load_data(serialized_data):\n    import pickle\n    # Vulnerable: pickle.loads with untrusted data\n    return pickle.loads(serialized_data)\n\ndef main():\n    user_expr = input(\"Enter expression: \")\n    result = calculate_expression(user_expr)\n    print(f\"Result: {result}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 1,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "def calculate_expression(expr):\n    # Vulnerable: eval with user input\n    result = eval(expr)\n    return result\n\ndef execute_code(code):\n    # Vulnerable: exec with user input\n    exec(code)\n\ndef load_data(serialized_data):\n    import pickle\n    # Vulnerable: pickle.loads with untrusted data\n    return pickle.loads(serialized_data)\n\ndef main():\n    user_expr = input(\"Enter expression: \")\n    result = calculate_expression(user_expr)\n    print(f\"Result: {result}\")\n\nif __name__ == \"__main__\":\n    main()"
    }
  },
  {
    "Sno": 3.0,
    "Primary Language of Benchmark": "python",
    "Vulnerability": 0.0,
    "CVE-ID": null,
    "Severity": null,
    "CWE ID": "Safe Python code with proper input validation",
    "File name with path": null,
    "Line Number": null,
    "Code Snippet": "python\nimport subprocess\nimport shlex\nimport ast\n\ndef safe_calculate(expr):\n    # Safe: Using ast.literal_eval for safe evaluation\n    try:\n        return ast.literal_eval(expr)\n    except (ValueError, SyntaxError):\n        return None\n\ndef safe_execute_command(command):\n    # Safe: Using subprocess with list and no shell\n    try:\n        cmd_list = shlex.split(command)\n        result = subprocess.run(cmd_list, capture_output=True, text=True)\n        return result.stdout\n    except Exception:\n        return None\n\ndef main():\n    user_input = input(\"Enter mathematical expression: \")\n    result = safe_calculate(user_input)\n    if result is not None:\n        print(f\"Result: {result}\")\n    else:\n        print(\"Invalid expression\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "vulnerability": null,
    "question": null,
    "rejected": null,
    "commit_message": null,
    "cwe": null,
    "target": 0,
    "nvd_url": null,
    "func_hash": null,
    "file_hash": null,
    "cve_desc": null,
    "commit_id": null,
    "commit_url": null,
    "idx": null,
    "project_url": null,
    "project": "replica_test",
    "cve": null,
    "file_name": null,
    "func": {
      "function": "import subprocess\nimport shlex\nimport ast\n\ndef safe_calculate(expr):\n    # Safe: Using ast.literal_eval for safe evaluation\n    try:\n        return ast.literal_eval(expr)\n    except (ValueError, SyntaxError):\n        return None\n\ndef safe_execute_command(command):\n    # Safe: Using subprocess with list and no shell\n    try:\n        cmd_list = shlex.split(command)\n        result = subprocess.run(cmd_list, capture_output=True, text=True)\n        return result.stdout\n    except Exception:\n        return None\n\ndef main():\n    user_input = input(\"Enter mathematical expression: \")\n    result = safe_calculate(user_input)\n    if result is not None:\n        print(f\"Result: {result}\")\n    else:\n        print(\"Invalid expression\")\n\nif __name__ == \"__main__\":\n    main()"
    }
  }
]